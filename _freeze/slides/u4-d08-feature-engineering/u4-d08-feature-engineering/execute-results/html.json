{
  "hash": "8ccb23b4a15b0c3cef4c372d9f24b803",
  "result": {
    "markdown": "---\ntitle: \"Feature engineering\"\nsubtitle: \"<br><br> Data Science in a Box\"\nauthor: \"[datasciencebox.org](https://datasciencebox.org/)\"\noutput:\n  xaringan::moon_reader:\n    css: [\"../xaringan-themer.css\", \"../slides.css\"]\n    lib_dir: libs\n    anchor_sections: FALSE\n    nature:\n      ratio: \"16:9\"\n      highlightLines: true\n      highlightStyle: solarized-light\n      countIncrementalSlides: false\n---\n\n\n\n\nlayout: true\n  \n<div class=\"my-footer\">\n<span>\n<a href=\"https://datasciencebox.org\" target=\"_blank\">datasciencebox.org</a>\n</span>\n</div> \n\n---\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nclass: middle\n\n# Feature engineering\n\n---\n\n## Feature engineering\n\n- We prefer simple models when possible, but **parsimony** does not mean sacrificing accuracy (or predictive performance) in the interest of simplicity\n\n--\n- Variables that go into the model and how they are represented are just as critical to success of the model\n\n--\n- **Feature engineering** allows us to get creative with our predictors in an effort to make them more useful for our model (to increase its predictive performance) \n\n---\n\n## Same training and testing sets as before\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Fix random numbers by setting the seed \n# Enables analysis to be reproducible when random numbers are used \nset.seed(1116)\n\n# Put 80% of the data into the training set \nemail_split <- initial_split(email, prop = 0.80)\n\n# Create data frames for the two sets:\ntrain_data <- training(email_split)\ntest_data  <- testing(email_split)\n```\n:::\n\n\n---\n\n## A simple approach: `mutate()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntrain_data %>%\n  mutate(\n    date = lubridate::date(time),\n    dow  = wday(time),\n    month = month(time)\n    ) %>%\n  select(time, date, dow, month) %>%\n  sample_n(size = 5) # shuffle to show a variety\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 x 4\n  time                date         dow month\n  <dttm>              <date>     <dbl> <dbl>\n1 2012-03-15 13:51:35 2012-03-15     5     3\n2 2012-03-03 08:24:02 2012-03-03     7     3\n3 2012-01-18 10:55:23 2012-01-18     4     1\n4 2012-02-24 22:08:59 2012-02-24     6     2\n5 2012-01-11 07:18:51 2012-01-11     4     1\n```\n:::\n:::\n\n\n---\n\n## Modeling workflow, revisited\n\n- Create a **recipe** for feature engineering steps to be applied to the training data\n\n--\n- Fit the model to the training data after these steps have been applied\n\n--\n- Using the model estimates from the training data, predict outcomes for the test data\n\n--\n- Evaluate the performance of the model on the test data\n\n---\n\nclass: middle\n\n# Building recipes\n\n---\n\n## Initiate a recipe\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_rec <- recipe(\n  spam ~ .,          # formula\n  data = train_data  # data to use for cataloguing names and types of variables\n  )\n\nsummary(email_rec)\n```\n:::\n\n\n.xsmall[\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 21 x 4\n   variable     type    role      source  \n   <chr>        <chr>   <chr>     <chr>   \n 1 to_multiple  nominal predictor original\n 2 from         nominal predictor original\n 3 cc           numeric predictor original\n 4 sent_email   nominal predictor original\n 5 time         date    predictor original\n 6 image        numeric predictor original\n 7 attach       numeric predictor original\n 8 dollar       numeric predictor original\n 9 winner       nominal predictor original\n10 inherit      numeric predictor original\n11 viagra       numeric predictor original\n12 password     numeric predictor original\n13 num_char     numeric predictor original\n14 line_breaks  numeric predictor original\n15 format       nominal predictor original\n16 re_subj      nominal predictor original\n17 exclaim_subj numeric predictor original\n18 urgent_subj  nominal predictor original\n19 exclaim_mess numeric predictor original\n20 number       nominal predictor original\n21 spam         nominal outcome   original\n```\n:::\n:::\n\n]\n\n---\n\n## Remove certain variables\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_rec <- email_rec %>%\n  step_rm(from, sent_email)\n```\n:::\n\n\n.small[\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n   outcome          1\n predictor         20\n\nOperations:\n\nVariables removed from, sent_email\n```\n:::\n:::\n\n]\n\n---\n\n## Feature engineer date\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_rec <- email_rec %>%\n  step_date(time, features = c(\"dow\", \"month\")) %>%\n  step_rm(time)\n```\n:::\n\n\n.small[\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n   outcome          1\n predictor         20\n\nOperations:\n\nVariables removed from, sent_email\nDate features from time\nVariables removed time\n```\n:::\n:::\n\n]\n\n---\n\n## Discretize numeric variables\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_rec <- email_rec %>%\n  step_cut(cc, attach, dollar, breaks = c(0, 1)) %>%\n  step_cut(inherit, password, breaks = c(0, 1, 5, 10, 20))\n```\n:::\n\n\n.small[\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n   outcome          1\n predictor         20\n\nOperations:\n\nVariables removed from, sent_email\nDate features from time\nVariables removed time\nCut numeric for cc, attach, dollar\nCut numeric for inherit, password\n```\n:::\n:::\n\n]\n\n---\n\n## Create dummy variables\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_rec <- email_rec %>%\n  step_dummy(all_nominal(), -all_outcomes())\n```\n:::\n\n\n.small[\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n   outcome          1\n predictor         20\n\nOperations:\n\nVariables removed from, sent_email\nDate features from time\nVariables removed time\nCut numeric for cc, attach, dollar\nCut numeric for inherit, password\nDummy variables from all_nominal(), -all_outcomes()\n```\n:::\n:::\n\n]\n\n---\n\n## Remove zero variance variables\n\nVariables that contain only a single value\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_rec <- email_rec %>%\n  step_zv(all_predictors())\n```\n:::\n\n\n.small[\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n   outcome          1\n predictor         20\n\nOperations:\n\nVariables removed from, sent_email\nDate features from time\nVariables removed time\nCut numeric for cc, attach, dollar\nCut numeric for inherit, password\nDummy variables from all_nominal(), -all_outcomes()\nZero variance filter on all_predictors()\n```\n:::\n:::\n\n]\n\n---\n\n## All in one place\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_rec <- recipe(spam ~ ., data = email) %>%\n  step_rm(from, sent_email) %>%\n  step_date(time, features = c(\"dow\", \"month\")) %>%               \n  step_rm(time) %>%\n  step_cut(cc, attach, dollar, breaks = c(0, 1)) %>%\n  step_cut(inherit, password, breaks = c(0, 1, 5, 10, 20)) %>%\n  step_dummy(all_nominal(), -all_outcomes()) %>%\n  step_zv(all_predictors())\n```\n:::\n\n\n---\n\nclass: middle\n\n# Building workflows\n\n---\n\n## Define model\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_mod <- logistic_reg() %>% \n  set_engine(\"glm\")\n\nemail_mod\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLogistic Regression Model Specification (classification)\n\nComputational engine: glm \n```\n:::\n:::\n\n\n---\n\n## Define workflow\n\n**Workflows** bring together models and recipes so that they can be easily applied to both the training and test data.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_wflow <- workflow() %>% \n  add_model(email_mod) %>% \n  add_recipe(email_rec)\n```\n:::\n\n\n.small[\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n== Workflow ========================================================================================\nPreprocessor: Recipe\nModel: logistic_reg()\n\n-- Preprocessor ------------------------------------------------------------------------------------\n7 Recipe Steps\n\n* step_rm()\n* step_date()\n* step_rm()\n* step_cut()\n* step_cut()\n* step_dummy()\n* step_zv()\n\n-- Model -------------------------------------------------------------------------------------------\nLogistic Regression Model Specification (classification)\n\nComputational engine: glm \n```\n:::\n:::\n\n]\n\n---\n\n## Fit model to training data\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_fit <- email_wflow %>% \n  fit(data = train_data)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n```\n:::\n:::\n\n\n---\n\n.small[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntidy(email_fit) %>% print(n = 31)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 31 x 5\n   term               estimate  std.error statistic  p.value\n   <chr>                 <dbl>      <dbl>     <dbl>    <dbl>\n 1 (Intercept)        -0.914      0.251     -3.65   2.62e- 4\n 2 image              -1.65       0.933     -1.76   7.78e- 2\n 3 viagra              2.27     182.         0.0125 9.90e- 1\n 4 num_char            0.0469     0.0243     1.93   5.40e- 2\n 5 line_breaks        -0.00509    0.00138   -3.68   2.32e- 4\n 6 exclaim_subj       -0.202      0.277     -0.729  4.66e- 1\n 7 exclaim_mess        0.00882    0.00186    4.74   2.17e- 6\n 8 to_multiple_X1     -2.61       0.354     -7.37   1.69e-13\n 9 cc_X.1.68.         -0.312      0.489     -0.638  5.24e- 1\n10 attach_X.1.21.      2.05       0.368      5.57   2.55e- 8\n11 dollar_X.1.64.      0.218      0.217      1.00   3.16e- 1\n12 winner_yes          2.18       0.428      5.08   3.71e- 7\n13 inherit_X.1.5.     -9.25     764.        -0.0121 9.90e- 1\n14 inherit_X.5.10.     2.52       1.44       1.75   7.97e- 2\n15 password_X.1.5.    -1.71       0.749     -2.29   2.22e- 2\n16 password_X.5.10.  -12.5      475.        -0.0263 9.79e- 1\n17 password_X.10.20. -13.7      813.        -0.0168 9.87e- 1\n18 password_X.20.22. -13.9     1029.        -0.0135 9.89e- 1\n19 format_X1          -0.920      0.159     -5.79   6.95e- 9\n20 re_subj_X1         -2.91       0.437     -6.65   2.88e-11\n21 urgent_subj_X1      3.52       1.08       3.25   1.16e- 3\n22 number_small       -0.902      0.168     -5.38   7.43e- 8\n23 number_big         -0.209      0.250     -0.838  4.02e- 1\n24 time_dow_Mon        0.134      0.297      0.453  6.51e- 1\n25 time_dow_Tue        0.441      0.268      1.65   9.99e- 2\n26 time_dow_Wed       -0.131      0.275     -0.478  6.33e- 1\n27 time_dow_Thu        0.123      0.279      0.442  6.58e- 1\n28 time_dow_Fri        0.0896     0.283      0.316  7.52e- 1\n29 time_dow_Sat        0.277      0.300      0.923  3.56e- 1\n30 time_month_Feb      0.760      0.180      4.22   2.41e- 5\n31 time_month_Mar      0.519      0.180      2.88   4.01e- 3\n```\n:::\n:::\n\n]\n\n---\n\n## Make predictions for test data\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_pred <- predict(email_fit, test_data, type = \"prob\") %>% \n  bind_cols(test_data) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: There are new levels in a factor: NA\n```\n:::\n\n```{.r .cell-code}\nemail_pred\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 785 x 23\n  .pred_0  .pred_1 spam  to_multiple from     cc sent_email\n    <dbl>    <dbl> <fct> <fct>       <fct> <int> <fct>     \n1   0.995 0.00451  0     1           1         0 1         \n2   0.999 0.00129  0     0           1         1 1         \n3   0.969 0.0306   0     0           1         0 0         \n4   0.999 0.000816 0     0           1         1 0         \n5   0.993 0.00680  0     0           1         4 0         \n6   0.852 0.148    0     0           1         0 0         \n# ... with 779 more rows, and 16 more variables: time <dttm>,\n#   image <dbl>, attach <dbl>, dollar <dbl>, winner <fct>,\n#   inherit <dbl>, viagra <dbl>, password <dbl>, num_char <dbl>,\n#   line_breaks <int>, format <fct>, re_subj <fct>,\n#   exclaim_subj <dbl>, urgent_subj <fct>, exclaim_mess <dbl>,\n#   number <fct>\n```\n:::\n:::\n\n\n---\n\n## Evaluate the performance\n\n.pull-left[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_pred %>%\n  roc_curve(\n    truth = spam,\n    .pred_1,\n    event_level = \"second\"\n  ) %>%\n  autoplot()\n```\n:::\n\n]\n.pull-right[\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](u4-d08-feature-engineering_files/figure-html/unnamed-chunk-22-1.png){fig-align='center' width=100%}\n:::\n:::\n\n]\n\n---\n\n## Evaluate the performance\n\n.pull-left[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_pred %>%\n  roc_auc(\n    truth = spam,\n    .pred_1,\n    event_level = \"second\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.856\n```\n:::\n:::\n\n]\n.pull-right[\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](u4-d08-feature-engineering_files/figure-html/unnamed-chunk-24-1.png){fig-align='center' width=100%}\n:::\n:::\n\n]\n\n---\n\nclass: middle\n\n# Making decisions\n\n---\n\n## Cutoff probability: 0.5\n\n.panelset[\n.panel[.panel-name[Output]\n\nSuppose we decide to label an email as spam if the model predicts the probability of spam to be **more than 0.5**.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n|                        | Email is not spam| Email is spam|\n|:-----------------------|-----------------:|-------------:|\n|Email labelled not spam |               708|            60|\n|Email labelled spam     |                 8|             8|\n|NA                      |                 1|            NA|\n:::\n:::\n\n]\n.panel[.panel-name[Code]\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncutoff_prob <- 0.5\nemail_pred %>%\n  mutate(\n    spam      = if_else(spam == 1, \"Email is spam\", \"Email is not spam\"),\n    spam_pred = if_else(.pred_1 > cutoff_prob, \"Email labelled spam\", \"Email labelled not spam\")\n    ) %>%\n  count(spam_pred, spam) %>%\n  pivot_wider(names_from = spam, values_from = n) %>%\n  kable(col.names = c(\"\", \"Email is not spam\", \"Email is spam\"))\n```\n:::\n\n]\n]\n\n---\n\n## Cutoff probability: 0.25\n\n.panelset[\n.panel[.panel-name[Output]\n\nSuppose we decide to label an email as spam if the model predicts the probability of spam to be **more than 0.25**.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n|                        | Email is not spam| Email is spam|\n|:-----------------------|-----------------:|-------------:|\n|Email labelled not spam |               665|            33|\n|Email labelled spam     |                51|            35|\n|NA                      |                 1|            NA|\n:::\n:::\n\n]\n.panel[.panel-name[Code]\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncutoff_prob <- 0.25\nemail_pred %>%\n  mutate(\n    spam      = if_else(spam == 1, \"Email is spam\", \"Email is not spam\"),\n    spam_pred = if_else(.pred_1 > cutoff_prob, \"Email labelled spam\", \"Email labelled not spam\")\n    ) %>%\n  count(spam_pred, spam) %>%\n  pivot_wider(names_from = spam, values_from = n) %>%\n  kable(col.names = c(\"\", \"Email is not spam\", \"Email is spam\"))\n```\n:::\n\n]\n]\n\n---\n\n## Cutoff probability: 0.75\n\n.panelset[\n.panel[.panel-name[Output]\n\nSuppose we decide to label an email as spam if the model predicts the probability of spam to be **more than 0.75**.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n|                        | Email is not spam| Email is spam|\n|:-----------------------|-----------------:|-------------:|\n|Email labelled not spam |               714|            65|\n|Email labelled spam     |                 2|             3|\n|NA                      |                 1|            NA|\n:::\n:::\n\n]\n.panel[.panel-name[Code]\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncutoff_prob <- 0.75\nemail_pred %>%\n  mutate(\n    spam      = if_else(spam == 1, \"Email is spam\", \"Email is not spam\"),\n    spam_pred = if_else(.pred_1 > cutoff_prob, \"Email labelled spam\", \"Email labelled not spam\")\n    ) %>%\n  count(spam_pred, spam) %>%\n  pivot_wider(names_from = spam, values_from = n) %>%\n  kable(col.names = c(\"\", \"Email is not spam\", \"Email is spam\"))\n```\n:::\n\n]\n]\n",
    "supporting": [
      "u4-d08-feature-engineering_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/font-awesome/css/all.css\" rel=\"stylesheet\" />\r\n<link href=\"../../site_libs/font-awesome/css/v4-shims.css\" rel=\"stylesheet\" />\r\n<link href=\"../../site_libs/panelset/panelset.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/panelset/panelset.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}